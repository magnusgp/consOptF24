function [x,Xmat,iter] = lpsolverActiveSet(g,A,b,x0)
    %          Primal simplex LP solver
    %
    %          min  g'*x
    %           x
    %          s.t. A x  = b      (Lagrange multiplier: lambda)
    %                 x >= 0      (Lagrange multiplier: s)
    %
    
    x = x0;

    Xmat = x;

    [n,m] = size(A);

    tol = 1.0e-16;

    % For handling degenerate states
    eps = 0.01;
    perturbed = false;

    Bset = find(x > tol);

    if length(Bset) < n

        additionalidx = length(find(abs(x) < tol));

        neededidx = n - length(Bset);

        if additionalidx >= neededidx

            Bset = [Bset additionalidx(1:neededidx)];

        else

            Bset = 
    
    Nset = find(x == 0)';
    Bset = setdiff(1:m,Nset);

    B = A(:,Bset);
    N = A(:,Nset);
    
    %% Main loop
    maxit = 10;
    
    converged = false;
    iter = 0;
    while iter < maxit && ~converged
        iter = iter + 1;

        disp(size(B))

        gB = g(Bset);
        gN = g(Nset);

        x(Bset) = B\b;

        lambda = B'\gB;

        sN = gN - N'*lambda;

        if sN >= 0
            converged = true;
        else
            qidx = [];
            Nidx = [];
            for i = 1:length(Nset)
                if sN(i) < tol
                    Nidx = i;
                    qidx = Nset(i);
                end
            end

            d = B\A(:,qidx);
        
            if d <= 0
                disp("Unbounded")
                return
            else
                idx = find(d > tol);
            
                [xqplus,pidx] = min(x(Bset(idx))./d(idx));

                % Handle degeneracy
                if xqplus < tol && ~perturbed
                    disp("Perturb!")
                    perturbed = true;
                    bold = b;
                    b = b + B*eps.^(1:n)';
                end

                x(Bset) = x(Bset) - xqplus*d;
                x(Bset(pidx)) = 0;
                x(Nset(Nidx)) = xqplus;

                idxtemp = Bset(pidx);

                Bset(pidx) = Nset(Nidx);

                Nset(Nidx) = idxtemp;
            
                B = A(:,Bset);
                N = A(:,Nset);

                % disp(Bset)

                Xmat = [Xmat x];
        
            end
        end
    end

    if perturbed
        x(Bset) = B\bold;
    end

end
